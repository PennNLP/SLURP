-- LTL specification file for ROS communication with robot
-- (Generated by c$)

LTLSPEC -- Assumptions
	(
		-- Room sensor mutex
		([]((e.e_in_r1 & !e.e_in_r2 & !e.e_in_r3) |
		(!e.e_in_r1 & e.e_in_r2 & !e.e_in_r3) |
		(!e.e_in_r1 & !e.e_in_r2 & e.e_in_r3))) &
		
		-- Eventually, you get anywhere
		([]<>(e.e_in_r1)) &
		([]<>(e.e_in_r2)) &
		([]<>(e.e_in_r3)) &

		-- Basic truths of the world	 
		[](TRUE) &
		([]<>(TRUE))
 	 );
LTLSPEC -- Guarantees
	(
		-- Starting state for robot
		-- TODO: Add bomb and user back in
		(e.e_in_r1 & !s.a_go_r1 & !s.a_go_r2 &
		 !s.a_go_r3 & !s.work & !s.a_get_defuser & 
		 !s.s2 & !s.s3 & s.idle & !s.done) &

		-- Next room mutex
		([]((next(s.a_go_r1) & !next(s.a_go_r2) & !next(s.a_go_r3) & !next(s.idle)) | 
		    (!next(s.a_go_r1) & next(s.a_go_r2) & !next(s.a_go_r3) & !next(s.idle)) | 
		    (!next(s.a_go_r1) & !next(s.a_go_r2) & next(s.a_go_r3) & !next(s.idle)) |
		    (!next(s.a_go_r1) & !next(s.a_go_r2) & !next(s.a_go_r3) & next(s.idle)))) &
		
		-- Room movements fully connected
		([](s.a_go_r1 -> (next(s.idle) | next(s.a_go_r1) | next(s.a_go_r2) | 
				  next(s.a_go_r3)))) & 
		([](s.a_go_r2 -> (next(s.idle) | next(s.a_go_r1) | next(s.a_go_r2) | 
				  next(s.a_go_r3)))) & 
		([](s.a_go_r3 -> (next(s.idle) | next(s.a_go_r1) | next(s.a_go_r2) | 
				  next(s.a_go_r3)))) & 

		-- Search transitions
		([](((next(e.e_in_r2) & s.a_go_r2) | s.s2) <-> next(s.s2))) &
		([](((next(e.e_in_r3) & s.a_go_r3) | s.s3) <-> next(s.s3))) &

		-- Temporary constraints
		([](!s.work)) &

		-- Done
		([]((s.s2) <-> next(s.done))) &
		([]<>(s.done))
	);
 
		-- Movements stop when the enivronment allows it
		--([]((e.e_in_r1 & s.a_go_r1 -> !next(s.a_go_r1)) &
		-- (e.e_in_r2 & s.a_go_r2 -> !next(s.a_go_r2)) &
		-- (e.e_in_r3 & s.a_go_r3 -> !next(s.a_go_r3)))) &

		-- Safety
		--([](e.bomb <->  next(s.a_defuse))) & 
		--([](next(s.p1) <-> next(s.a_defuse))) & 
		--([](next(s.a_defuse)  <-> next(s.work))) &