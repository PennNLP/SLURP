-- LTL specification file
-- (Generated by c$)

LTLSPEC -- Assumptions
	(
		-- Fairness constraint on environment
		([]<>(!e.bomb & !e.hostage)) &
		[](TRUE) &
		([]<>(TRUE))
 	 );
LTLSPEC -- Guarantees
	(
		-- Starting state for robot
		(!s.s1 & !s.s2  & !s.s3 & !s.work & !s.a_defuse & !s.a_call & !s.done) &
		(s.a_r1 & !s.a_r2 & !s.a_r3) &
		-- Next room mutex
		([]((next(s.a_r1) & !next(s.a_r2) & !next(s.a_r3)) | 
		(!next(s.a_r1) & next(s.a_r2) & !next(s.a_r3)) | 
		(!next(s.a_r1) & !next(s.a_r2) & next(s.a_r3)))) &
		-- Room transitions
		([](s.a_r1 -> (next(s.a_r1) | (!next(s.work) & (next(s.a_r2) | next(s.a_r3)))))) & 
		([](s.a_r2 -> (next(s.a_r2) | (!next(s.work) & next(s.a_r1))))) &
		([](s.a_r3 -> (next(s.a_r3) | (!next(s.work) & next(s.a_r1))))) &   
		-- Search transitions
		([]((s.a_r1 | s.s1) <-> next(s.s1))) &
		([]((s.a_r2 | s.s2) <-> next(s.s2))) &
		([]((s.a_r3 | s.s3) <-> next(s.s3))) &
		-- Safety
		([](e.bomb <->  next(s.p1))) & 
		([](next(s.p1) <-> next(s.a_defuse))) & 
		([](e.hostage <-> next(s.p2))) & 
		([](next(s.p2) & !next(s.p1) <-> next(s.a_call))) &
		([](next(s.p1) | next(s.p2) <-> next(s.work))) &
		-- Done
		([]((s.s1 & s.s2 & s.s3) <-> next(s.done))) &
		([]<>(s.done))
	);
 