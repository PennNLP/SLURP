-- LTL specification file for user finding scenario
-- (Generated by c$)

LTLSPEC -- Assumptions
(	
	-- No restrictions on environment transitions
	[](TRUE) &

	-- Eventually, searches complete
	([]<>(e.search_done))
);

LTLSPEC -- Guarantees
(
	-- Starting state for robot
	(s.r_hall & !s.r_classroom & !s.r_outer_lab) &
	(!s.have_defuser & !s.get_defuser & !s.search & !s.s_classroom & !s.s_outer_lab & !s.work) &
	
	-- Movement mutex
	([]((next(s.r_hall) & !next(s.r_classroom) & !next(s.r_outer_lab)) | 
	(!next(s.r_hall) & next(s.r_classroom) & !next(s.r_outer_lab)) |
	(!next(s.r_hall) & !next(s.r_classroom) & next(s.r_outer_lab)))) &
	
    -- Topographical connectivity restrictions
    ([](s.r_hall -> (next(s.r_hall) | next(s.r_classroom) | next(s.r_outer_lab)))) & 
    ([](s.r_classroom -> (next(s.r_classroom) | next(s.r_hall)))) & 
    ([](s.r_outer_lab -> (next(s.r_outer_lab) | next(s.r_hall)))) & 

    -- Do not move while working
	([](next(s.work) <-> next(s.get_defuser) | next(s.search))) &
	([]((s.work | next(s.work)) -> 
	   ((next(s.r_hall) <-> s.r_hall) & (next(s.r_classroom) <-> s.r_classroom) & (next(s.r_outer_lab) <-> s.r_outer_lab)))) &

	-- Maintain search memory flags
	([](((s.r_classroom & s.search & next(e.search_done)) | s.s_classroom) <-> next(s.s_classroom))) &
	([](((s.r_outer_lab & s.search & next(e.search_done)) | s.s_outer_lab) <-> next(s.s_outer_lab))) &

	-- React to the user, but only get the defuser once and don't do it while still searching
	([]((!s.have_defuser & !s.search & next(e.user1)) <-> next(s.get_defuser))) &
	([]((s.get_defuser | s.have_defuser) <-> next(s.have_defuser))) &
	
	-- Mission goals
    
    -- #0: Search if you don't have the defuser
	([]<>((!s.have_defuser) -> (s.s_classroom & s.s_outer_lab))) &

    -- #1: Abort and go to r1 if you searched but couldn't find it
	([]<>((!s.have_defuser & s.s_classroom & s.s_outer_lab) -> (s.r_hall))) &

    -- #2: Go back to r1 if you found it
	([]<>(s.have_defuser -> s.r_hall)) &

    -- Done flag
	([](((next(s.have_defuser) | (next(s.s_classroom) & next(s.s_outer_lab))) & next(s.r_hall)) <-> next(s.done)))
);
